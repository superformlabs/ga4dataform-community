
  /*
  This file is part of "GMP Clearview" package.
  Copyright (C)  2025 Infotrust 
  Alina Zilbergerts, Trish Dothkar,
  -- */


config {
    type: "operations",
    hasOutput: true,
    database: dataform.projectConfig.vars.OUTPUT_PROJECT,
    schema: dataform.projectConfig.vars.TRANSFORMATIONS_DATASET,
    name: "base_ga4_events"
}
js {
    const { helpers } = require("includes/core/helpers");
    const config = helpers.getConfig();
    const fieldnames_sql = helpers.getEventParamKeysArray(config, ref("events_2025*"), "event_params");
    const base_tbl = self();
}

DECLARE insert_sql, delete_sql, incremental_sql STRING ;
DECLARE  fieldnames STRING DEFAULT (${fieldnames_sql});   -- Comma-separated array of custom and standard event parameters to pivot


-- Check if this is a brand new deployment and table must be created first
DECLARE is_incremental BOOL DEFAULT (
  SELECT  COUNT(1) > 0
  FROM  `${database()}.${schema()}.INFORMATION_SCHEMA.TABLES`
  WHERE  table_name = '${name()}' );
-- select is_incremental;

-- Identify start date
DECLARE date_checkpoint DATE DEFAULT  (  
    CASE
      WHEN is_incremental 
      -- THEN ( SELECT COALESCE(MAX(event_date)+1, DATE('${config.GA4_START_DATE}')) FROM `${base_tbl}` where data_is_final = true)
      THEN ( SELECT COALESCE(MAX(event_date)+1, DATE('${config.GA4_START_DATE}')) FROM ${base_tbl} where data_is_final = true)
      ELSE ( SELECT  DATE('${config.GA4_START_DATE}'))
    END
    );

-- Compile SQL respectively
SET incremental_sql = (
    CASE
      WHEN is_incremental 
      THEN """INSERT INTO ${base_tbl}  """
      ELSE """CREATE OR REPLACE TABLE ${base_tbl}
          PARTITION BY event_date
          CLUSTER BY session_id
          OPTIONS(description='''Intermediate incremental events table flattened event parameters.''')
          AS """
    END
  );
select date_checkpoint;
select incremental_sql;
SET delete_sql = (
    CASE
      WHEN is_incremental 
      THEN  FORMAT("""DELETE FROM ${base_tbl} WHERE event_date between  '%s'  and CURRENT_DATE();""", CAST(date_checkpoint AS STRING))
      ELSE "SELECT 1=1"
    END);
  
  -- ==============================
  --            QUERY
  -- ==============================
  SET insert_sql = FORMAT(incremental_sql || """
  select * from (
  select
    parse_date(%s,event_date) as event_date,
    event_timestamp,
    event_name,
    -- user info
    user_pseudo_id,
    user_id,
    is_active_user,

    -- event info
    batch_event_index,
    batch_ordering_id,
    batch_page_id,

    concat(user_pseudo_id, 
            (select value.int_value from unnest(event_params) where key = 'ga_session_id')
            ) as session_id,
    concat( event_name , event_timestamp, user_pseudo_id, 
            (select value.int_value from unnest(event_params) where key = 'ga_session_id'),
            batch_page_id, batch_ordering_id, batch_event_index
            ) as event_id,
    stream_id,
    platform,
    geo,
    privacy_info,
    device,

    ep.key param_name,
    coalesce(ep.value.string_value, CAST(ep.value.int_value AS STRING),
    CAST(ep.value.float_value AS STRING), CAST(ep.value.double_value AS STRING)) as param_value,
    session_traffic_source_last_click.cross_channel_campaign as cross_channel_campaign,
    session_traffic_source_last_click.SA360_campaign as sa360_campaign,
    session_traffic_source_last_click.DV360_campaign as dv360_campaign,
    session_traffic_source_last_click.CM360_campaign as cm360_campaign,
    session_traffic_source_last_click.google_ads_campaign as google_ads_campaign,
    session_traffic_source_last_click.manual_campaign as manual_campaign,
    ecommerce,
    items,
    user_properties,
    publisher,
    if(date_diff(current_date(), cast(event_date as date format 'YYYYMMDD'), day) > ${config.DATA_IS_FINAL_DAYS}, true, false) as data_is_final,
    current_timestamp() as _run_timestamp
  from %s, UNNEST(event_params) ep
  where _table_suffix >= FORMAT_DATE(%s, CAST('%s' AS DATE))
	and user_pseudo_id is not null
		and ${helpers.generateFilterTypeFromListSQL("exclude", "event_name", config.EVENTS_TO_EXCLUDE)}
	-- discard unwanted hostnames
	and ${helpers.generateFilterTypeFromListSQL("exclude", "device.web_info.hostname", config.HOSTNAME_EXCLUDE)}
	-- only include wanted hostnames
	and ${helpers.generateFilterTypeFromListSQL("include", "device.web_info.hostname", config.HOSTNAME_INCLUDE_ONLY)}

    )
      PIVOT (
      MIN(param_value)
      FOR param_name IN (%s)  
    ) pivoted_params
  """, "'%Y%m%d'",  "${ref('events_2025*')}" , "'%m%d'" ,  CAST(date_checkpoint AS STRING) ,  fieldnames );

 select insert_sql;

  EXECUTE IMMEDIATE delete_sql;
  EXECUTE IMMEDIATE insert_sql;

-- BEGIN

--   BEGIN TRANSACTION;
--   EXECUTE IMMEDIATE delete_sql; -- need to figure out what this statement should be when creating brand new table, as SELECT 1=1 doesnot work
--   EXECUTE IMMEDIATE insert_sql;
--   COMMIT TRANSACTION;

-- EXCEPTION WHEN ERROR THEN
--   -- Roll back the transaction inside the exception handler.
--   SELECT @@error.message;
--   ROLLBACK TRANSACTION;
-- END;



--   /* incrementality */
--   -- pre_operations {
--   --   declare ff STRING default (${fieldnames});
--   --   declare date_checkpoint DATE DEFAULT
--   --   (
--   --     ${when(incremental(),
--   --       `select coalesce(max(event_date)+1, date('${config.GA4_START_DATE}'))
--   --       from ${self()} where is_final = true`,
--   --     `select date('${config.GA4_START_DATE}')`)}   /* the default, when it's not incremental */
--   --   );
--   --     -- delete some older data, since this may be updated later by GA4
--   --   ${
--   --     when(incremental(),
--   --       `delete from ${self()} where event_date >= date_checkpoint`
--   --       ,"")
--   --   }
--   -- }
